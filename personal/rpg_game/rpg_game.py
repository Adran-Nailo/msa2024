import characters
import random 

#all of the color codes tied to a word to change the color/style of text.
class color:

    default = "\033[0m"
    darkgrey = "\033[90m"
    green = "\033[32m"
    purple = "\033[95m"
    blue = '\033[94m'
    cyan = '\033[96m'
    yellow = '\033[93m'
    red = '\033[91m'
    clear = '\033[0m'
    bold = '\033[1m'
    underline = '\033[4m'
    error = "\033[91;1;4m"
    black = '\033[30m'
    darkred = '\033[31m'
    orange = '\033[33m'
    darkblue = '\033[34m'
    darkpurple = '\033[35m'
    darkcyan = '\033[36m'
    lightgrey = '\033[37m'
    lightgreen = '\033[92m'

#all of the maps for the game.
class maps:
    world_map = [
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[w]","[w]","[W]","[w]","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[W]","   ","   ","   ","[W]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   ","[w]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","[w]","h01","[w]","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","m01","[ ]","[ ]","[ ]","[ ]","[ ]","c03","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","e01","s02","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[b]","[b]","H2O","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[b]","[b]","[b]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","[ ]","[ ]","H2O","H2O","[b]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[c]","[ ]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[t]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","d03","d03","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[f]","[f]","[ ]","[ ]","[ ]","[ ]","[t]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","d03","d03","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[ ]","[f]","[f]","[f]","[f]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[f]","[f]","[f]","[f]","[f]","[f]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","d04","d04","[ ]","[ ]","[ ]","[b]","[b]","[b]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[c]","[t]","[t]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[f]","[f]","[f]","[f]","[f]","[f]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","d04","d04","[ ]","[ ]","[ ]","[b]","[b]","[b]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","c02","[c]","[t]","[t]","[t]","[t]","[t]","[ ]","[ ]","[ ]","[f]","[f]","[f]","[f]","[f]","[f]","[f]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[b]","[b]","[b]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H20","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","H2O","H2O","H2O","H2O","H2O","H2O","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]
        ]
    #starting house
    h01 = [
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","[w]","[w]","[w]","[w]","[w]","[w]","[w]","[w]","[w]","[w]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","c01","[c]","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[c]","[c]","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[c]","[c]","[c]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","s01","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[w]","   ","   ","   "],
            ["   ","   ","   ","[w]","[w]","[w]","[w]","[w]","w01","[w]","[w]","[w]","[w]","[w]","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]
        ]
    #castle surrounded by moat
    dungeon1 = [
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","w02","w02","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","w02","w02","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","w03","w03","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","w03","w03","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","gcw","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
        ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
    ]

#all of the in game conversations that run when you interact with something
class dialogues():
    #tutorial sign
    def s02():
        user_input = input("do you want to see the keybinds?\ny/n ")
        if user_input == "y":
            print("w = move up\na = move left\ns = move down\nd = move right\np = place a wall\nh = dig a hole\ne = interact with all tiles within one space\ni = check inventory\n` = save and quit")
        user_input = input("do you want to read the tutorial?\ny/n ")
        if user_input == "y":
            print(f"the world is quite large, so don't be afraid to explore\nthere are many tiles that have no effect to your chaarachter, such as [ ], [{color.green}t{color.clear}], and [{color.underline} {color.clear}]")
            print(f"there are many tiles that are impassable, but have no penalty for trying, such as {color.red}[W]{color.clear}, {color.red}[{color.blue}W{color.red}]{color.clear}, and [{color.yellow}d{color.clear}]")
            print(f"some tiles, such as [{color.purple}C{color.clear}] and [{color.yellow}d{color.clear}], \ncan be interacted with for some effect, whether it is increaseing your score or going through a door")
            print(f"some tiles, such as [{color.red}f{color.clear}], are passable, but will decrease your score if you walk trough them]")
            print(f"some tiles, such as {color.blue}[W]{color.clear}, are impassable, and will decrease your score if you try to enter their space")
            print(f"if you place a tile (with p or h) it will place it in the same place as you, although it will have no effect on you until you move off its space")
            print("it takes construction pieces to place down walls or dig holes")
            print(f"if you encounter a tile that looks like -> [{color.purple}m{color.clear}], you can interact with it to talk to a merchant, and use your gold")
            print("currently there is no use for swords or potions, but they will be implemented eventually")
        user_input = input("do you want to see what each tile is?\ny/n ")
        if user_input == "y":
            print(f"[ ] = ground\n[0] = player\n[{color.green}t{color.clear}] = tree\n{color.red}[W]{color.clear} = house wall\n{color.red}[{color.blue}W{color.red}]{color.clear} = window\n[{color.yellow}c{color.clear}] = coin\n[{color.purple}c{color.clear}] = unopened chest\n[{color.blue}c{color.clear}] = opened chest\n[{color.red}f{color.clear}] = fire\n[{color.yellow}S{color.clear}] = sign\n[{color.yellow}d{color.clear}] = door\n[{color.purple}m{color.clear}] = merchant\n{color.blue}[W]{color.clear} = water\n{color.underline}[ ]{color.clear} = bridge\n{color.darkgrey}[W]{color.clear} = castle wall")
        user_input = input(f"do you want to set a new render distance?\nit is currently set to {player.render_distance}\ny/n ")
        if user_input == "y":
            while True:
                try:
                    new_render_distance = int(input("Enter the new render distance: "))
                    player.render_distance = new_render_distance
                    break
                except:
                    print("please enter a whole number")
        input("press enter to continue")
    #merchant SW of the starting house
    def m01():
        print("welcome to my shop!")
        user_input = input("would you like to look at my wares? \nI've got a limited stock right now\ny/n ")
        wares =  ["1x construction tool","1x sword","3x potion"]
        prices = [5,20,4]
        objects = [
            [1,0,0],
            [0,1,0],
            [0,0,3]
        ]
        if user_input == "y": 
            while True:
                print(f"{color.yellow}type the number of the object that you want to buy, or if you are done, type 'done'{color.clear}")
                for object in wares:
                    print(f"{wares.index(object)+1}: {object} -> {prices[wares.index(object)]}")
                try:
                    user_input = input("")
                    uppercase_user_input = user_input.capitalize()
                    if uppercase_user_input == "Done":
                        print("\nCome again!")
                        break
                    else:
                        user_input = int(user_input)
                except: 
                    print(f"{color.error}please enter a correct response{color.clear}")
                for ware in range(len(wares)):
                    if  user_input == ware+1:
                        if prices[ware] > player.score:
                            print("you don't have enough money for that")
                        else:
                            print(f"\nYou lost {prices[ware]} gold!\nYou got {wares[ware]}!")
                            player.score -= prices[ware]
                            player.wall_count += objects[ware][0]
                            player.sword_count += objects[ware][1]
                            player.potion_count += objects[ware][2]
        else:
            print("\ncome back if you change your mind!")

class enemy_encounters():
    def __init__ (self, damage, health, armor, name):
        self.damage = damage
        self.health = health
        self.armor = armor
        self.name = name
#defines a new player
def new_player(file):
    f = open(file,"w")
    f.write("11*9*0*[0]*world_map*20*5*0*0*0*3*False*False*0*False*False*0")
    f.close()
#player = characters.Characters(11,9,0,"[0]",maps.world_map,20,5)

#translates string of a map to a class item
def map_loader(map_string):
    possible_map_strings = ["world_map","h01","dungeon1"]
    map_codes = [maps.world_map,maps.h01,maps.dungeon1]
    returned_map = map_codes[possible_map_strings.index(map_string)]
    return returned_map

def map_saver():
    map_strings = ["world_map","h01","dungeon1"]
    map_codes = [maps.world_map,maps.h01,maps.dungeon1]
    returned_map = map_strings[map_codes.index(player.current_map)]
    return returned_map
#loads save data
def load_save_data(file):
    f = open(file, "r")
    full_data = f.readline()
    split_data = full_data.split("*")
    map_class = map_loader(split_data[4])
    score = int(split_data[2])
    player = characters.Characters(int(split_data[0]),int(split_data[1]),score,split_data[3],map_class,int(split_data[5]),int(split_data[6]),int(split_data[7]),int(split_data[8]),int(split_data[9]),int(split_data[10]),split_data[11],split_data[12],int(split_data[13]),split_data[14],split_data[15],int(split_data[16]))
    return player

def save_file_contents(file):
    f = open(file, "w")
    map_class = map_saver()
    print(f"{player.coordinates_x}, {player.coordinates_y}")
    f.write(f"{player.coordinates_x}*{player.coordinates_y}*{player.score}*{player.icon}*{map_class}*{player.health}*{player.damage}*{player.sword_count}*{player.potion_count}*{player.wall_count}*{player.render_distance}*{player.basic_attack_unlocked}*{player.advanced_attack_unlocked}*{player.armor}*{player.basic_shield}*{player.advanced_shield}*{player.block}")
    f.close
    save_and_quit = input("Do you want to quit? y/n\n")
    if save_and_quit == "y":
        quit = True
    else:
        quit = False
    return quit

#lists that determine if items are interactable.
#make sure to also update the lists in the interact function
#make sure to add all doors to the impassable list
signs = ["s01","s02"]
containers = ["c01","c02","c03"]
doors = ["h01","w01","d04","d03","w02","w03"]
merchants = ["m01"]
enemies = ["e01"]

#prints content of inventory when I is imput.
def check_inventory():
    print(f"Gold = {player.score}")
    if player.sword_count != 0:
        print(f"Sword = {player.sword_count}")
    if player.potion_count != 0:
        print(f"Potion = {player.potion_count}")
    if player.wall_count != 0:
        print(f"Wall = {player.wall_count}")

#gets keystrokes from the player and then checks each letter against the list of possible letters, weeding out the letters that are invalid,
#returns a list of all the valid keys from a user's input
def get_player_direction(valid_key_list):
    valid_directions = valid_key_list
    direction = input("Enter key: ")
    direction_list = []  
        
    for letter in direction:
        if letter in valid_directions:
            direction_list += letter
    
    return direction_list

#places a wall/hole at the players position if they have enough wall pieces
def place_item(current_map,tile):
    if player.wall_count > 0:
        current_map[player.coordinates_y][player.coordinates_x] = tile
        player.wall_count -= 1
    else:
        print("You do not have enough wall pieces to place down a wall")

#runs interactions in which the player has possible input
#the list_of_conversations variable is the tile that represents the conversation on the map#
#the list_of_conversation_functions variable are the functions that correspond to the same item in the list_of_conversation variable
#anytime you add something to one list, you MUST add something to the other list
def conversation_function(interactable_object):
    list_of_conversations = ["s02","m01"]
    list_of_conversation_functions = [dialogues.s02,dialogues.m01]
    for number in range(len(list_of_conversations)):
        if interactable_object == list_of_conversations[number]:
            run = list_of_conversation_functions[number]
            run()
            break

        
#the function that controls which map the player switches to, as well as the coordinate for that map, when the player interacts with a door
def door_interaction(door_string):   
    for current_tile in range(len(doors)):
        #position pairs for when the player goes through the door in y,x coordinates
        start_pos =    [
            [12,8],
            [8,11],
            [24,20],
            [18,5],
            [22,28],
            [25,38]
        ]
        #the maps that cooincide with each door in the door list at the start of the code
        list_of_maps = [maps.h01,maps.world_map,maps.dungeon1,maps.dungeon1,maps.world_map,maps.world_map]
        if doors[current_tile] == door_string:
            #changes the map
            player.current_map = list_of_maps[current_tile]
            #sets the x and y coordinates
            player.coordinates_x = start_pos[current_tile][1]
            player.coordinates_y = start_pos[current_tile][0]

#function to add items to a player's inventory when they open a closed container
def container(container_string):  
    #the amount of gold added when the player opens the container
    container_loot = [5,15,0]
    #whether or not a container has extra items
    extra_check = [False,False,True]
    #for the extra loot, each number coresponds to the amount added in sword count, potion count, and wall count, in that order
    extra_loot = [
        [0, 0, 0],
        [0, 0, 0],
        [1, 5, 10]
        ]
    for number in range(len(containers)):
        #adds gold
        if container_string == containers[number]:
            player.score += container_loot[number]
            print(f"You found {container_loot[number]} gold!")
            skip_map = True
            #adds the rest of the items
            if extra_check[number] == True:
                #adds swords
                if extra_loot[number][0]!=0:
                    player.sword_count += extra_loot[number][0]
                    print(f"you found {extra_loot[number][0]} sword(s)!")
                #adds potions
                if extra_loot[number][1]!=0:
                    player.potion_count += extra_loot[number][1]
                    print(f"you found {extra_loot[number][1]} potion(s)!")
                #adds tools
                if extra_loot[number][2]!=0:
                    player.wall_count += extra_loot[number][2]
                    print(f"you found {extra_loot[number][2]} wall piece(s)!")
        else:
            skip_map = False
    return skip_map

#function to run the interaction with objects within 1 tile of player
def interact(current_map):
    skip_map = False
    left_bound = player.coordinates_x -1
    right_bound = player.coordinates_x + 1
    upper_bound = player.coordinates_y -1
    lower_bound = player.coordinates_y +1
    #list of object keys found on the current game map that you can interact with
    #make sure to also update the lists at the top of the code
    simple_sign = ["s01"]
    simple_sign_messages = ["Home\nSweet\nHome"]
    conversations = ["s02"] + merchants
    interactable_objects = simple_sign + containers +conversations + doors
    #messages that coincide with the same index number in the interactable_objects list

    for row in range(upper_bound,lower_bound + 1):
            for length in range(left_bound, right_bound + 1): 
                if current_map[row][length] in interactable_objects:
                    current_interactable_object = current_map[row][length]
                    index_number = interactable_objects.index(current_interactable_object)
                    #runs conversation_function if the current tile is in the conversation list
                    if current_interactable_object in conversations:
                        conversation_function(current_interactable_object)
                    #runs the container function and sets the tile to the open chest tile
                    elif current_interactable_object in containers:
                        skip_map = container(interactable_objects[index_number])
                        player.current_map[row][length] = "[C]"
                    #runs the door_interaction function if the tile is in the door list
                    elif current_interactable_object in doors:
                        door_interaction(interactable_objects[index_number])
                    #checks to see if the item is a simple sign, and if it is, it prints the text that coincides with it, and skips the map rendering
                    elif current_interactable_object in simple_sign:
                        print(f"{color.yellow}{simple_sign_messages[simple_sign.index(current_interactable_object)]}{color.default}")
                        skip_map = True
    return skip_map

#function that handles all player movement, including all keys that do something, changing the player x and y, and running the functions that coincide with the other keys
#also lists out all tiles that are solids, hazards, and placeable
def player_movement (current_map):
    skip_map = False
    possible_keys = ["w","a","s","d","p","h","e","i","`"]
    #make sure all these lists are the *SAME* length
    movement_keys =  ["w","a","s","d"]
    placement_keys = ["p","h","^","^"]
    interact_keys =  ["e","^","^","^"]
    inventory_keys = ["i","^","^","^"]
    length_of_lists = len(movement_keys)
    
    key_list = get_player_direction(possible_keys)
    solids = ["[w]","[W]","   ","H2O","gcw"] + doors
    hazards = ["   ", "H2O","[f]"]
    placeable_tiles = ["[w]","   "]
    
    #"[w]" = wall
    #"[W]" = window
    #"   " = border
    #"H2O" = water
    index_num = [0,1,0,1]
    #the number that is added before checking to see if the new postition is an impassable object
    number_1 = [-1,-1,+1,+1]
    #the number that undoes the other number's effect if the new postion is in an inpassable object
    number_2 = [1,1,-1,-1]
    coordinate_x_or_y = [0,1,0,1]
    for key in key_list:
        for number in range(length_of_lists):
            #checks to see if the user's input is in the movement keys
            if key == movement_keys[number]:
                    player.position_list[index_num[number]] += number_1[number]
                    if coordinate_x_or_y[number] == 0:
                        player.coordinates_y += number_1[number]
                    elif coordinate_x_or_y[number] == 1:
                        player.coordinates_x += number_1[number]
                    if (current_map[player.coordinates_y][player.coordinates_x] == "[c]"):
                            player.score += 1
                            print("You fould 1 gold!")
                            player.current_map[player.coordinates_y][player.coordinates_x] = "[ ]"
                    for current_hazard in hazards:
                        if (current_map[player.coordinates_y][player.coordinates_x] == current_hazard):
                            player.score -= 1
                    for current_solid in solids:
                        if (current_map[player.coordinates_y][player.coordinates_x] == current_solid):
                            player.position_list[index_num[number]] += number_2[number]
                            if coordinate_x_or_y[number] == 0:
                                player.coordinates_y += number_2[number]
                            elif coordinate_x_or_y[number] == 1:
                                player.coordinates_x += number_2[number]
            if key == interact_keys[number]:
                skip_map = interact(current_map)
            if key == inventory_keys[number]:
                skip_map = True
                check_inventory()
                
            elif key == placement_keys[number]:
                place_item(current_map,placeable_tiles[number])
            elif key == "`":
                skip_map = "save"

    return skip_map

#renders all tiles that have basic brackets, but formatted letters
def map_render_inner_tiles(key,partial_tiles):
    #make sure that the partial_tile_full_list contains all of the tiles that you want to render as partial tiles in it.
    #useless list that lists all of the partial tiles
    [
    "[t]",
    "[c]",
    "[C]",
    "[f]"
     ]
    #list that shows what color each letter will be
    colors = [
        color.green,
        color.yellow,
        color.cyan,
        color.red
              ]
    icon = [
        "t",
        "c",
        "c",
        "f"
        ]
    #adds "d" to the end of the icon list, and colors.yellow to the color list for each door
    for door in range(len(doors)):
        colors.append(color.yellow)
        icon.append("d")
    #adds "m" to the icon list, and colors.purple to the color list for each merchant
    for merchant in range(len(merchants)):
        colors.append(color.purple)
        icon.append("m")
    for enemy in range(len(enemies)):
        colors.append(color.error)
        icon.append("E")
    tile_index = partial_tiles.index(key)
    drawn_tile = f"[{colors[tile_index]}{icon[tile_index]}{color.clear}]"
    return drawn_tile

#renders all of the tiles that are the same color for the full tile
def map_render_full_tiles(key,full_tiles):
    ["[w]","H2O","[b]","gcw"]
    colors = [color.red,color.blue,color.underline,color.darkgrey]
    icon = ["[W]","[W]","[ ]","[W]"]
    drawn_tile = f"{colors[full_tiles.index(key)]}{icon[full_tiles.index(key)]}{color.clear}"
    return drawn_tile

#combat function
def combat(tile,enemy_list):
    foe = enemy_list[enemies.index(tile)]
    combat_still_going = True
    while combat_still_going == True:
        player.block = 0
        print(f"{foe.name} has {foe.health} health left\n\nYou have {player.health} health\n\nIt is your turn")
        player_choice = input(f"1: Attack\n2: Defend\n")
        if player_choice == "1":
            if player.basic_attack_unlocked == True:
                print(f"1: Basic Attack | {player.damage} damage")
            if player.advanced_attack_unlocked == True:
                print(f"2: Advanced Attack | {player.damage + 3} damage")
            player_action = input("")
            if player_action == "1":
                damage_done = 0
                if player.damage -foe.armor > 0:
                    damage_done = player.damage - foe.armor
                foe.health -= player.damage - foe.armor
                print(f"You do {damage_done} damage to the {foe.name}")
            elif player_action == "2":
                damage_done = 0
                if player.damage -foe.armor+3 > 0:
                    damage_done = player.damage+3 - foe.armor
                foe.health -= player.damage+3 - foe.armor
                print(f"You do {damage_done} damage to the {foe.name}")
        if player_choice == "2":
            if player.basic_shield == True:
                print(f"1: Basic Block | blocks 3 damage")
            if player.advanced_shield == True:
                print(f"2: Advanced Block | blocks 5 damage")
            player_action = input("")
            if player_action == "1":
                player.block = 3
            elif player_action == "2":
                player.block = 5
            
        input("")
        print(f"It is now the {foe.name}'s turn")
        input("")
        damage_done = 0
        if foe.damage - player.armor - player.block > 0:
            damage_done = foe.damage - player.armor - player.block
        print(f"It does {damage_done} damage to you")
        player.health -= damage_done

        input("")
        if foe.health <= 0:
            combat_still_going == False
            print("You won the fight and found 5 gold!")
            player.score += 5
            killed_enemy = True
            input("")
            break
        elif player.health <= 0:
            combat_still_going == False
            print("You lost the fight and lost 5 gold :(")
            input("")
            player.coordinates_y += 1
            player.score -= 5
            killed_enemy = False
            player.health = 1
            break
    return killed_enemy
         

#runs all the main functions
def main():
    end_game = False
    while end_game != True:
        #gets user input, breaks it into a list, then checks each key for its uses,
        #checks to see if it is wasd, and if it is, it changes the player x and y respectively
        #checks to see if it is is any other valid key, and runs the corresponding function
        skip_map = player_movement(player.current_map)
        if skip_map == "save":
            end_game = save_file_contents(save_file)
        width = len(player.current_map[0])
        left_bound = player.coordinates_x - player.render_distance
        right_bound = player.coordinates_x + player.render_distance + 1
        upper_bound = player.coordinates_y -player.render_distance
        lower_bound = player.coordinates_y +player.render_distance
        partial_tiles = ["[t]","[c]","[C]","[f]"]
        partial_tile_full_list = partial_tiles + doors + merchants+enemies
        full_tiles = ["[w]","H2O","[b]","gcw"]

        if left_bound < 0:
            left_bound = 1
        if right_bound >= width:
            right_bound = len(player.current_map)-1
        if upper_bound < 0:
            upper_bound = 0
        if lower_bound >= len(player.current_map):
            lower_bound = len(player.current_map)-1

        #combat function
        if player.current_map[player.coordinates_y][player.coordinates_x] in enemies:
            killed_enemy = False
            goblin = enemy_encounters(3,10,0,"Goblin")
            enemy_list = [goblin]
            killed_enemy = combat(player.current_map[player.coordinates_y][player.coordinates_x],enemy_list)
            if killed_enemy == True:
                player.current_map[player.coordinates_y][player.coordinates_x] = "[ ]"

        #renders the map if the player_movement function returns false       
        if skip_map == False:
            for row in range(upper_bound,lower_bound+1):
                to_draw = ""
                for length in range(left_bound, right_bound):
                    
                    current_tile = player.current_map[row][length]
                    #Render and color player
                    if row == player.coordinates_y and length == player.coordinates_x:
                        to_draw = to_draw + f"[{color.bold}0{color.clear}]"
                    #Render and color partial tiles
                    elif current_tile in partial_tile_full_list:
                        to_draw += map_render_inner_tiles(player.current_map[row][length],partial_tile_full_list)
                    #render and color full tiles
                    elif current_tile in full_tiles:
                        to_draw += map_render_full_tiles(player.current_map[row][length],full_tiles)
                    #Render and color windows
                    elif current_tile == "[W]":
                        to_draw = to_draw + f"{color.red}[{color.cyan}W{color.red}]{color.clear}"
                    #color and render signs
                    elif current_tile in signs:
                        to_draw += f"[{color.yellow}S{color.clear}]"
                    #color and render unopened containers
                    elif current_tile in containers:
                        to_draw += f"[{color.purple}c{color.clear}]"
                    else:
                        to_draw = to_draw + current_tile
                print(to_draw)
            
while True:
        print(f"{color.bold}\n\n\nWelcome to Ironclad Legends!\n{color.clear}")
        save_file = input(f"Please input the name of your save file:\n{color.yellow}NOTE: You must include the file extension .txt\n{color.clear}")
        try:
            f = open(save_file,"r")
            f.close()
        except:
            print(f"{color.error}\n\n----------------------------\nERROR: save file not found.\n----------------------------\n\n{color.clear}")
            continue
        while True:
            new_file = input("Is this a new file?\n")
            if new_file == "yes":
                new_player(save_file)
                player = load_save_data(save_file)
            else:
                player = load_save_data(save_file)
            break
        break

if player.coordinates_x == 11 and player.coordinates_y == 9 and player.current_map == maps.world_map:
    print(f"\n{color.bold}Enter 'e' to view keybindings and a short tutorial (recommended for your first playthrough), or enter any direction key to jump in without it.\nIf you decide you want to view the tutorial again or view the keybindings, just return to this sign and press 'e' to interact.{color.clear}")   
main()
